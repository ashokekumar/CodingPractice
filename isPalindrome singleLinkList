/**
* takes O(n) time for traverse
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    
    
    bool isPalindrome(ListNode* head) {
    
      ListNode* prev = nullptr; 
      ListNode* next = nullptr;
      ListNode* fast = head->next; 
      ListNode* slow = head;
       
       if(head->next==nullptr || head ==nullptr) return true;

       while(fast != nullptr){   
       next = slow->next; // reverse
       slow->next=prev ;
       prev =slow;
       slow= next;

       if(fast->next == nullptr)
       {
             
            break;//even numbers
       }
       else{ 
           fast=fast->next->next; 
           if(fast==nullptr){slow=slow->next;}
       } //even numbers
     
       }

       while(slow!=nullptr) {

           if(slow->val != prev->val) return false;
           else {
               slow= slow->next;
               prev=prev->next;
           }
       }
return true;
    }
};
