import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'diagonalDifference' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts 2D_INTEGER_ARRAY arr as parameter.
     */

    public static int diagonalDifference(List<List<Integer>> arr) {
   
    Integer  dg1=0,dg2=0; 
      int col=arr.size()-1;
 
    for (int i=0; i<=arr.size()-1; i++) 
    {         
    for (int j=0; j<=arr.get(i).size()-1; j++)
    {
        if(i==j) dg1+=arr.get(i).get(j); 
    //    if((i==1 && i==j) ||((i==0 && j==3) ||(i==3 && j==0))) dg2+=arr.get(i).get(j); 
    }
    dg2+=arr.get(i).get(col);
    col--; 
    }
    
    return Math.abs(dg1-dg2);    
    
    }

}


public static void main(String[] args) {
		// TODO Auto-generated method stub
		 /*List<Integer> list = new ArrayList<Integer>(); 
	        list.add(1); 
	        list.add(5); 
	        list.add(3); 
	        list.add(6); 
	        System.out.println(ValueTest(list,4) ); */
		
		
		List<List<Integer>> list = new ArrayList<List<Integer>>();
		
		List<Integer> l = new ArrayList<Integer>(); 
        l.add(1); 
        l.add(5); 
        l.add(3);
        
        list.add(l);
        List<Integer> l2 = new ArrayList<Integer>(); 
        
        l2.add(1); 
        l2.add(5); 
        l2.add(3);        
        l2.add(4);
        
        list.add(l2);
        List<Integer> l3 = new ArrayList<Integer>(); 
        
        l3.add(5); 
        l3.add(5); 
        l3.add(3);        
        l3.add(6); 
        l3.add(1);
        
        list.add(l3);
        
        printList(list);
        
        
	  
	        
	}


	private static void printList(List<List<Integer>> list) {
		
		//System.out.println(list.size());//column
		for (List<Integer> list2 : list) {

			int s= list2.size()-1;
			for(int i=0 ;i <=s; i++)
			System.out.print(list2.get(i)); //row1	
			System.out.println();
		}
		/*
		System.out.println(list.get(0).size()); //row1
		System.out.println(list.get(1).size()); //
		System.out.println(list.get(2).size());
		System.out.println(list.get(3).size());
		*/
	}

}
